package main.java.mylib.datastructures.Trees;
import main.java.mylib.datastructures.nodes.*;

import static org.junit.Assert.*;
import org.junit.Test;

public class BSTTest {

    @Test
    public void testInsert(){
        BST bst = new BST();

        bst.insert(5);
        bst.insert(3);
        bst.insert(8);
        bst.insert(2);
        bst.insert(1);

        TNode root = bst.getRoot();
        assertEquals(5, root.getData());
        assertEquals(3, root.getLeft().getData());
        assertEquals(8, root.getRight().getData());


    }
    @Test
    public void insertNode(){
        BST bst = new BST();
        bst.insert(new TNode(5));
        bst.insert(new TNode(3));
        bst.insert(new TNode(8));
        bst.insert(new TNode(4));
        bst.insert(new TNode(2));


        TNode root = bst.getRoot();
        assertEquals(5, root.getData());
        assertEquals(3, root.getLeft().getData());
        assertEquals(8,root.getRight().getData());

    }
    @Test

    public void testDelete(){
        BST bst = new BST();

        bst.insert(5);
        bst.insert(3);
        bst.insert(8);
        bst.insert(4);
        bst.insert(1);

        TNode root = bst.getRoot();




        bst.delete(4);

        root = bst.getRoot();
        assertEquals(5, root.getData());
        assertEquals(3, root.getLeft().getData());
        assertEquals(8, root.getRight().getData());
        assertNull(root.getLeft().getRight());
        assertEquals(1, root.getLeft().getLeft().getData());

    }
    @Test
    public void testDeleteNode(){

        BST bst = new BST();
        bst.insert(new TNode(5));
        bst.insert(new TNode(3));
        bst.insert(new TNode(8));
        bst.insert(new TNode(4));
        bst.insert(new TNode(2));


        TNode root = bst.getRoot();

        bst.delete(TNode(6));

        
        assertEquals(3, root.getData());
        assertEquals(8, root.getLeft().getData());
        assertEquals(4,root.getRight().getData());
    

    

    }
    @Test
    public void testSearch(){
        BST bst = new BST();
        bst.insert(5);
        bst.insert(2);
        bst.insert(8);
        bst.insert(1);
        bst.insert(3);
        bst.insert(7);
        bst.insert(9);
        
        assertTrue(bst.search(5));
        assertTrue(bst.search(1));
        assertTrue(bst.search(9));
        assertFalse(bst.search(0));
        assertFalse(bst.search(6));
    }



    
}
